JDBC로 데이터베이스 연동
JDBC(Java DataBase Connectivity) API(Application Programming Interface)

1. 순서
	1) java.sql.* 패키지 임포트
	2) JDBC 드라이버 로딩
		ojdbc8.jar

		- 동적 로딩 : Class.forName("패키지명을 포함한 클래스명");

	3) 데이터베이스 접속을 위한 Connection객체 생성
		String url = "jdbc:oracle:thin:@localhost:1521:orcl
		_aA123456
			참고
				localhost : 같은 위치 서버 위치
				127.0.0.1


		DriverManager
			.getConnection(String url)
			.getConnection(String url, String user, String password)
			.getConnection(String url, Properties prop)

	4) 쿼리문을 실행하기 위한  Statement/PreparedStatement/CallableStatement 객체 생성 쿼리 실행
		Statement : 정적 쿼리

		ResultSet executeQuery(String sql) : 조회용 쿼리(SELECT ....)

		int executeUpdate(String sql) : 데이터 변경용 쿼리(INSERT, UPDATE, DELETE)
									  : 반환값 - 반영된 레코드 갯수

	5) 쿼리 실행 결과 값(int, ResultSet) 사용
		ResultSet
			boolean next() : 다음 커서(레코드로 이동)

			get 자로형(....) : 데이터 조회용 메서드
				(int ...) : 컬럼 순서 번호(1,2, ....)
				(String .. ) : 컬럼명

			java.sql.Date getDate(...) : 날짜
			java.sql.Time getTime(..) : 시간
			java.sql.Timestamp getTimestamp(..) : 날짜와 시간
	6) 사용된 객체(ResultSet, Statement/PreparedStatement/CallableStatement, Connection) 종료

데이터베이스 쿼리 실행
1. Statement
Connection
	- createStatement()

1) 정적인 쿼리에 사용
2) 하나의 쿼리를 사용하고 나면 더는 사용할 수 없습니다.
3) Statement 객체의 메서드 종류
	ResultSet executeQuery(String sql) :  SELECT  문
		반환값 : ResultSet - 레코드를 조회할 수 있는 커서

			참고) 날짜, 시간
				날짜만 조회
				getDate(...)

				시간만 조회
				getTime(...)

				날짜 + 시간
				getTimestamp(...)

	int executeUpdate(String sql) : INSERT, UPDATE, DELETE 문
		반환값 : 반영된 레코드 갯수

2. PreparedStatement
Connection
	.prepareStatement(String sql);
1) 동적인 쿼리에 사용
2) PreparedStatement 객체는 하나의 객체로 여러 번의 쿼리를 실행할 수 있으며, 동일한 쿼리문을 특정 값만 바꾸어서 여러 번 실행해야 할 때, 매개변수가 많아서 쿼리문을 정리해야 할 때 유용합니다.

3) setXxx() 메서드
4) PreparedStatement 객체의 메서드
	ResultSet rs executeQuery();
	int executeUpdate();

쿼리문 실행 결과 값 가져오기
1. ResultSet



============================================================================



JdbcTemplate
1. 설치 및 설정
1) spring-jdbc
2) tomcat-jdbc
	- 커넥션 풀
		- 미리 연결 객체를 여러개 생성해서 필요할때마다 빌려주고, 회수하는 방식
		- 반응성, 성능 향상의 효과

+ spring-context
+ lombok

2. DataSource 설정

3. JdbcTemplate을 이용한 쿼리실행
1) query()
- List query(String sql, RowMapper rowMapper)
- List query(String sql, Object[] args, RowMapper rowMapper)
- List query(String sql, RowMapper rowMapper, Object... args)

2) queryForObject()
	- 레코드 1개만 조회

3) update()
- int update(String sql)
- int update(String sql, Object... args)

	String sql = "INSERT INTO DEPT2 VALUES (?,?,?);

	jdbcTemplate.update(sql,50,"DEPT2","LOC2");

로거
slf4j api
logback classic

로그 레벨

FATAL
ERROR
WARN

INFO
DEBUG
TRACE


4. PreparedStatementCreator를 이용한 쿼리 실행
5. INSERT 쿼리 실행 시 KeyHolder를 이용해서 자동 생성 키값 구하기
6. 스프링의 익셉션 변환 처리
	- 각 연동 기술에 따라 발생하는 익셉션을 스프링이 제공하는 익셉션으로 변환함으로써 다음과 같이 구현 기술에 상관없이 동일한 코드로 익셉션을 처리할 수 있게 된다.
	SQLExcpetion, HibernateException, PersistenceException ->  DataAccessException
	(RuntimeException)

7. 트랜잭션 처리
- @Transactional

setAutoCommit(false);

try{

	SQL 1번 실행
	SQL 2번 실행
	SQL 3번 실행

	conn.commit();
} catch (SQLExcpetion e) {
	conn.rollback();
}



============================================================================



스프링 MVC 시작하기
1. 스프링 MVC를 위한 설정
1) 컨트롤러 구현
2) JSP 구현

2. 스프링 MVC 프레임워크 동작 방식
요청(/hello) -> DispatcherServlet -> HandlerMapping -> 컨트롤러 빈(스프링 컨테이너) -> HandlerAdapter -> 컨트롤러 빈 -> 실행 -> ModelAndView
HandlerAdapter : 컨트롤러 빈의 종류가 다양하기 때문에 맞춰서 실행하기 위한 목적
			           @Controller, Controller 인터페이스의 구현체, HttpRequestHandler 인터페이스 구현체


ModelAndView :
	1) Model : 데이터 (EL 속성으로 추가된 데이터)
	2) View : 출력 템플릿 경로 정보

3. WebMvcConfigurer 인터페이스와 설정
	- 웹 MVC 설정에 대한 항목이 정의되어 있는 인터페이스

4. 정리
1) DispatcherServlet
	: 요청과 응답의 창구 역할을 하는 서블릿 클래스
	- 스프링 컨테이너 생성

2) HandlerMapping
	: 요청 방식 + 주소 -> 스프링 컨테이너에 있는 컨트롤러 빈을 검색

3) HandlerAdapter
	: 형태가 다양한 컨트롤러 빈(@Controller, Controller 인터페이스, HttpRequestHandler 인터페이스) -> 실행 -> ModelAndView로 반환

	참고) ModelAndView
				- addObject(String name, String value) : EL 속성으로 추가되는 속성
				- setViewName(...) : 뷰 경로

	요청메서드의 반환값이 String 이미지만 -> HandlerAdpter에서 실행시 ModelAndView 객체로 변환

4) ViewResolver
	: ModelAndView 정보 -> 출력을 위한 View 객체 검색


5. 요청 처리에 대한 편의 기능 제공
	1) 요청 데이터의 이름과 동일한 매개변수를 요청 메서드에 정의하면 자동으로 주입
	2) 정의한 변수의 자료형으로 자동 형변환
	3) 요청 데이터의 이름과 요청 메서드에 정의한 이름이 다른 경우
		@RequestParam("요청 데이터의 이름")
			- required : true(기본값) : 요청 파라미터의 필수

	요청 데이터
		GET : ?이름=값&이름=값
		POST : 요청 바디 이름=값&이름=값

		HttpServletRequest
			String getParameter(String name)
			String[] getParameterValues(String name);

		커맨드 객체
			(DTO -> getter, setter)
		Spring6 -> Record 클래스도 적용 가능

		서블릿 기본 객체 -> 편의상 스프링 컨테이너 관리 객체로 설정
		HttpServletRequest
		HttpServletResponse
		Httpsession


		Model -> 요청 메서드의 자동 주입
			-> 데이터 관리 객체(EL식 속성)
			- addAttribute(String name, Object value)

Ant 경로 패턴
/member/* -> member 경로 하위 파일
	예) /member/join.jsp
/member/** -> member 경로를 포함한 하위 경로 포함 모든 파일
	예) /member/mypage/index.jsp

? -> 문자 1개

/m?01
-> m101, m201



============================================================================



타임리프(Thymeleaf)
1. 설정
	thymeleaf-spring6
	thymeleaf - java8time // JDK8 Date & TIME API  -> #temporals : 형식화
	thymeleaf layout :레이아웃 기능

2. 특징
	- Natural Template
	- 원래 HTML과 서버사이드 렌더링 결과 거의 동일하게 보이는 효과
	- 번역 기술
		- cacheable

타임리프 기본문법
1. 타임리프의 주요 식(expression)
1) 변수 식 : ${식...}

2) 메세지 식 : #{메세지 코드}

	참고)
		fmt:setBundle
			<fmt:message key="메세지 코드">

3) 링크 식 : @{링크}
	- 컨텍스트 경로 추가
	-  URL 변수 식, 요청 파라미터 쉽게 추가

	참고)
		<c:url value="...." />

4) 선택 변수식
	th:object="${객체}"
		*{속성명}

th:block 태그 -> 번역되면 삭제
			-> 기능만 필요한 경우

2. 타임리프 식 객체
1) #strings
2) #numbers
3) #dates, #calendars, #temporals
4) #lists, #sets, #maps


3. th:text
	- 문자열 출력 (문자열만! - HTML 태그는 해석 불가)
	- th:utext - HTML 태그도 해석 가능

	- 기본 : 속성을 통해서 번역
	- [[${..}]] : 태그 안쪽에서 출력할때 사용 / 문자열만 인식, HTML 태그는 해석 X

4. th:each
	- 반복문

	- status
		- index : 0부터 시작하는 순서 번호
		- count : 1부터 시작하는 순서 번호
		- first : 첫번째 행 여부
		- last : 마지막 행 여부
		- even : 짝수 행 여부체크
		- odd : 홀수 행 여부체크

5. th:if, th:unless
	th:if : 조건식
	th:if="${...}"

	th:unless="${...}" : 조건식이 false -> 노출, true -> 노출 X


	true, false -> 상수로 바로 인식

6. th:switch, th:case


7. th:href
8. th:object

스프링 MVC 폼과 에러 메시지 연동
1. #fields.errors(..)
2. #fields.globalErrors(..)


타임리프 페이지 레이아웃



============================================================================



스프링 웹 MVC
1. 요청 매핑

@GetMapping
@DeleteMapping

@PostMapping
@PutMapping
@PatchMapping


@RequestMapping : 모든 요청에 대한 매핑 (GET, POST ....)
						  : 공통 URL 패턴 주로 정의

2. 커맨드 객체
	- 요청 데이터의 이름과 동일한 getter, setter가 정의된 객체
	- 요청 메서드의 매개변수로 정의만하면 알아서 주입(HandlerAdapater 에서 컨트롤러빈을 실행할때 주입)

	- 요청 데이터의 이름에 해당하는 값이 여러개 인 경우
		- 자료형 배열 또는 컬렉션(List, Set ...)

		참고) HttpServletRequest
				String[] getParameterValues()

	- 중첩된 커맨드 객체  : 커맨드 객체안에 커맨드 객체

3. 리다이렉트
	: 페이지 이동
	요청 메서드의 반환값 : redirect:주소

	참고)
		응답 헤더
			Location: 주소
		HttpServletResponse
			void sendRedirect("주소")
4. 모델


	참고)
		스프링 관리 객체
		1) 서블릿 핵심 객체  - 스프링 컨테이너에서 추가 : 편하게 의존성 주입
			HttpServletRequest
			HttpServletResponse
			HttpSession
			- 주로 요청과 응답 처리시에 많이 사용되므로 요청 메서드의 매개변수로 정의 : 자동 주입
			- @Autowired, 생성자 매개변수 : 의존성 자동 주입

		2) 스프링 핵심 객체
			Model : 속성을 관리하는 메서드가 주로 정의 : EL식 속성(변수)
				addAtrribute(String name, Object value)
				addAllAttribute(Map<.....> ....)


			Errors : 유효성 검사 실패시 실패에 대한 정보가 담겨 있는 객체

4. 폼 태그




==============================================================================================




스프링 웹 MVC
1. 요청 매핑

@GetMapping
@DeleteMapping

@PostMapping
@PutMapping
@PatchMapping


@RequestMapping : 모든 요청에 대한 매핑 (GET, POST ....)
						  : 공통 URL 패턴 주로 정의

2. 커맨드 객체
	- 요청 데이터의 이름과 동일한 getter, setter가 정의된 객체
	- 요청 메서드의 매개변수로 정의만하면 알아서 주입(HandlerAdapater 에서 컨트롤러빈을 실행할때 주입)

	- 요청 데이터의 이름에 해당하는 값이 여러개 인 경우
		- 자료형 배열 또는 컬렉션(List, Set ...)

		참고) HttpServletRequest
				String[] getParameterValues()

	- 중첩된 커맨드 객체  : 커맨드 객체안에 커맨드 객체

3. 리다이렉트
	: 페이지 이동
	요청 메서드의 반환값 : redirect:주소

	참고)
		응답 헤더
			Location: 주소
		HttpServletResponse
			void sendRedirect("주소")
4. 모델


	참고)
		스프링 관리 객체
		1) 서블릿 핵심 객체  - 스프링 컨테이너에서 추가 : 편하게 의존성 주입
			HttpServletRequest
			HttpServletResponse
			HttpSession
			- 주로 요청과 응답 처리시에 많이 사용되므로 요청 메서드의 매개변수로 정의 : 자동 주입
			- @Autowired, 생성자 매개변수 : 의존성 자동 주입

		2) 스프링 핵심 객체
			Model : 속성을 관리하는 메서드가 주로 정의 : EL식 속성(변수)
				addAtrribute(String name, Object value)
				addAllAttribute(Map<.....> ....)


			Errors : 유효성 검사 실패시 실패에 대한 정보가 담겨 있는 객체

4. 폼 태그